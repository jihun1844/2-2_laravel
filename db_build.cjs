// Usage: `node db_build.cjs .env`
/**
 * TODO:
 * default value로 .env를 참조하도록 한다.
 * 그리고 --env 로 파일경로를 작성하도록 한다.
 * 그리고 --name으로 컨테이너의 이름을 작성하도록 한다.
 *  */

const fs = require("fs");
const { spawnSync } = require("child_process");

// Docker 설치 확인
const dockerInstalled = checkDockerInstalled();
if (!dockerInstalled) {
    console.log(
        "Docker is not installed. Please install Docker and try again."
    );
    process.exit(1);
}

// .env 파일 읽기
const envFilePath = process.argv[2];
if (!envFilePath) {
    console.log("Please provide path to .env file as argument.");
    process.exit(1);
}

const envVariables = readEnvFile(envFilePath);
if (!envVariables) {
    console.log("Failed to read .env file.");
    process.exit(1);
}

// Docker 컨테이너 실행
const dbPort = envVariables.DB_PORT || "3306";
const dbPassword = envVariables.DB_PASSWORD;
const dbDatabase = envVariables.DB_DATABASE;
const dbUsername = envVariables.DB_USERNAME;

const dockerArgs = [
    "run",
    "-d",
    "--name",
    "test-db-container",
    "-p",
    `${dbPort}:3306`,
    "-e",
    `MYSQL_ROOT_PASSWORD=${dbPassword}`,
    "-e",
    `MYSQL_DATABASE=${dbDatabase}`,
    "-e",
    `MYSQL_USER=${dbUsername}`,
    "-e",
    `MYSQL_PASSWORD=${dbPassword}`,
    "mariadb:10.11.4-jammy",
    "--bind-address=0.0.0.0",
];

const dockerProcess = spawnSync("docker", dockerArgs, { stdio: "inherit" });
if (dockerProcess.error) {
    console.log("Failed to start Docker container.");
    process.exit(1);
}

function checkDockerInstalled() {
    const result = spawnSync("docker", ["--version"], { stdio: "pipe" });
    return result.status === 0;
}

function readEnvFile(filePath) {
    try {
        const envFileContent = fs.readFileSync(filePath, "utf8");
        const envLines = envFileContent.trim().split("\n");
        const envVariables = {};
        for (const line of envLines) {
            if (!line.startsWith("#")) {
                const [key, value] = line.split("=");
                envVariables[key] = value;
            }
        }
        return envVariables;
    } catch (err) {
        return null;
    }
}

// generated by gpt-3.5-turbo-0613
// prompted by github.com/d556f8
